var a-global = 1

# CHECK: (defun foo--Int (a)
def foo(a:Int) -> Int:
    return a + 1

# CHECK: (foo--Int 2)
foo(2)

# CHECK: (defun a-select--Int_Int (a b)
def a-select(a: Int, b: Int) -> Int:
    # CHECK:     (cl-return (if (< a b) a b))))
    return a if a < b else b

# templated function
def a-select-template[T](a: T, b: T) -> T:
    return a if a < b else b

# CHECK: (setq aa (a-select-template--T_T 1 2))
var aa = a-select-template(1, 2)

# CHECK: (defun a-select-template-called-- ()
def a-select-template-called() -> Int:
    # CHECK:     (cl-return (a-select-template--T_T 1 2))))
    return a-select-template(1, 2)

# These functions offers default values to builtin types
def Str() -> Str:
    return ""

def Int() -> Int:
    return 0

# CHECK: (cl-defstruct App name version)
class App:
    var name: Str
    var version: Int

    # The __init__ will be converted to constructor function
    def __init__(self, name: Str, version: Int):
        self.name = name
        self.version = version

    # CHECK: (defun App--run--App (self)
    # CHECK:     (message "App [%s] on v-%d is running" (App-name self) (App-version self))))
    def run(self):
        %message("App [%s] on v-%d is running", self.name, self.version)

    # The generated constructor for App
    # CHECK: (defun App--Str_Int (name version)
    # CHECK-NEXT:   (let (self)
    # CHECK-NEXT:     (setq self (make-App :name nil :version nil))
    # CHECK-NEXT:     (setf (App-name self) name)
    # CHECK-NEXT:     (setf (App-version self) version)

# CHECK: (setq app (App--Str_Int "apple" 1))
var app = App("apple", 1)

# CHECK: (message "app: %s" (App-name app))
%message("app: %s", app.name)

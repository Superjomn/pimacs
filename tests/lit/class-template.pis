@template[T]
class List:
    var list: Lisp

    def __init__(self):
        self.list = %list()

    def append(self, v: T):
        %push(v, self.list)

    def __getitem__(self, idx: Int) -> T:
        return %nth(self.list, idx)

    def size(self) -> Int:
        return %length(self.list)

# CHECK: var a :List[Int] = List[Int]()
var a = List[Int]()
# CHECK-NEXT: a.append(1)
a.append(1)

# CHECK: var a-size :Int = a.size()
var a-size = a.size()
# CHECK: var a-item :Int = a.__getitem__(0)
var a-item = a.__getitem__(0)

# The Sema will create default constructors for classes
# CHECK: @template[T]
# CHECK-NEXT: def List () -> List[T]:
# CHECK-NEXT:     var self :List[T] = make_obj[List[T]]()
# CHECK-NEXT:     self.list = %(list)
# CHECK-NEXT:     return self

class List[T]:
    "List container.
    Usage:
        var a: List[Int]
        a.append(1)  # => [1]
        a.size()     # => 1
        a in a       # => t
    "

    var -li: Lisp

    def __init__(self):
        "Create an empty List instance."
        self.-li = %list()

    def __init__(self, li: Lisp):
        "Create a List instance with list assigned."
        self.-li = li

    def size(self) -> Int:
        "Get the number of elements in the List."
        return %len(self.-li)

    def append(self, v: T):
        "Append a new element."
        %push(v, self.-li)

    def insert(self, pos: Int, v: T):
        %cl-insert(self.-li, pos, v)

    def count(self, value: T) -> Int:
        "Return the number of times x appears in the list."
        return %cl-count(value, self.-li)

    def remove(self, value: T) -> bool:
        "Remove the first item from the list whose value is equal to x.
        Returns:
          - true if removed successfully
          - false if no value encountered."
        return %cl-delete(value, self.-li, %:count, 1)

    def reverse(self):
        self.-li = %nreverse(self.-li)

    def copy(self) -> List[T]:
        return List[T](%copy-sequence(self.-li))

    def __setitem__(self, idx: Int, value: T):
        %setf(%nth(idx, self.-li), value)

    def __getitem__(self, idx: Int) -> T:
        return %nth(self.-li, idx)

    @pub
    def __add__(self, other: List[T]) -> List[T]:
        return %append(self.-li, other.__aslisp__())

    @pub
    def __contains__(self, value: T) -> Bool:
        return %member(value, self.-li)

    @pub
    def __aslisp__(self) -> Lisp:
        "This method helps to bridge this class to a native data in lisp world."
        return self.-li
